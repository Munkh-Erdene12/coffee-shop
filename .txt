  // const fileInputRef = React.useRef<HTMLInputElement | null>(null);
  const [images, setImages]: [
    { name: any; url: string; size: number }[],
    React.Dispatch<
      React.SetStateAction<{ name: any; url: string; size: number }[]>
    >
  ] = React.useState([] as { name: any; url: string; size: number }[]);

    const onFileSelect = (event: any) => {
    const files = event.target.files;
    if (files.length === 0) return;
    for (let i = 0; i < files.length; i++) {
      if (files[i].type.split("/")[0] !== "image") continue;
      if (!images.some((e) => e.name === files[i].name)) {
        setImages((prev) => [
          ...prev,
          {
            name: files[i].name,
            url: URL.createObjectURL(files[i]),
            size: files[i].size,
          },
        ]);
      }
    }
  };



"use client";
import React, { Component } from "react";
import {
  Inject,
  ScheduleComponent,
  Day,
  Week,
  WorkWeek,
  Month,
  Agenda,
  EventSettingsModel,
} from "@syncfusion/ej2-react-schedule";
import "@syncfusion/ej2-react-schedule/styles/material.css";

import AdminMainDesign from "@/components/admin/AdminMainDesign"; //#endregion
import PublisherContainer from "@/components/publisher/PublisherContainer";
export default class page extends Component {
  private localDate: EventSettingsModel = {
    dataSource: [
      {
        EndTime: new Date(2023, 0, 11, 6, 30),
        StartTime: new Date(2023, 0, 11, 4, 0),
      },
    ],
  };
  render() {
    return (
      <AdminMainDesign>
        <PublisherContainer>
          <ScheduleComponent
            currentView="Month"
            selectedDate={new Date()}
            eventSettings={this.localDate}
          >
            <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />
          </ScheduleComponent>
        </PublisherContainer>
      </AdminMainDesign>
    );
  }
}


        <div className="mx-5 mt-6 text-publisherTextColor dark:text-publisherDarkTextColor text-[22px] mb-3">
          {/* Detail of {ctx.modalData.name && ctx.modalData.name} */}
        </div>
        <div className="flex justify-between h-16 w-full  ">
          <p className="mx-5  w-1/5 h-full flex justify-start items-center text-[#6f6b7d]">
            Product:
          </p>
          <div className="mx-5 flex justify-start items-center h-full w-4/5">
            <div className="bg-[#f2f2f3] w-10 h-10 rounded-sm mr-3">
              {/* <CustomImage
                img={`${ctx.modalData.url && ctx.modalData.url}${
                  ctx.modalData.img && ctx.modalData.img
                }`}
                alt=""
              ></CustomImage> */}
            </div>
            <div>
              <p className="text-[#6f6b7d] text-[15px]">
                {/* {ctx.modalData.name && ctx.modalData.name} */}
              </p>
              <p className="hidden md:flex text-publisherTextColor1 dark:text-publisherDarkTextColor1 font-light  text-[14px]">
                {/* {ctx.modalData.description &&
                  ctx.modalData.description.substring(0, 52)} */}
                ...
              </p>
            </div>
          </div>
        </div>
        <hr className="w-full border-publisherBorder dark:border-publisherDarkBorder" />
        <div className="w-full h-auto flex justify-between">
          <div className="w-2/5">
            {categoryLinks.map((el, index) => (
              <ModalList key={index}>{el}</ModalList>
            ))}
          </div>
          <div className="w-3/5 flex justify-start flex-col">
            {/* <ModalList>
              {ctx.modalData.category.name && ctx.modalData.category.name}
            </ModalList>
            <ModalList>â‚®{ctx.modalData.price && ctx.modalData.price}</ModalList>
            <ModalList name="text-[#dff7e9] text-[15px]">
              <div className="w-20 h-7 bg-[#28c76f] rounded-sm  flex justify-center items-center  ">
                {ctx.modalData.selectedStatus && ctx.modalData.selectedStatus}
              </div>
            </ModalList>
            <ModalList>
              {ctx.modalData.barCode && ctx.modalData.barCode}
            </ModalList>
            <ModalList>
              {ctx.modalData.barCode && ctx.modalData.barCode}
            </ModalList> */}
          </div>
        </div>
        <div className="flex justify-between">
          <div className="text-[#6f6b7d] capitalize text-[15px] h-12 w-2/5 pt-2 px-5  ">
            Actions:
          </div>
          <div className="w-3/5 h-12 flex pt-2 px-5 ">
            <icon.FaRegEdit className="mr-3"></icon.FaRegEdit>
            <icon.FaTrashAlt></icon.FaTrashAlt>
          </div>
        </div>